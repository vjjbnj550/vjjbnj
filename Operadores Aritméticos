{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 005 Faça um programa que leia um número inteiro e mostre na tela o seu sucessor e seu antecessor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Digite um número: 42\n",
      "antecessor 41, numero 42, sucessor 43\n"
     ]
    }
   ],
   "source": [
    "n = int(input('Digite um número: '))\n",
    "print('antecessor {}, numero {}, sucessor {}' .format(n-1,n,n+1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 006 -Crie um algortimo que leia um número e mostre o seu dobro, triplo e raiz quadrada"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Digite um número: 9\n",
      "Numero 9, o seu dobro é 18, o seu triplo é 27 e sua raíz quadrada é 3.0\n"
     ]
    }
   ],
   "source": [
    "n = int(input('Digite um número: '))\n",
    "print('Numero {}, o seu dobro é {}, o seu triplo é {} e sua raíz quadrada é {}' .format(n,n*2, n*3, n**(1/2)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 007 - Desenvolva um programa que leia as duas notas de um aluno, calcule e mostre sua média"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Primeira nota: 6.7\n",
      "Segunda nota: 5.8\n",
      "A média final é: 6.25\n"
     ]
    }
   ],
   "source": [
    "nota1 = float(input('Primeira nota: '))\n",
    "nota2 = float(input('Segunda nota: '))\n",
    "resultado = (nota1 + nota2) / 2\n",
    "print('A média final é: {}' .format(resultado))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 008 -  Escreva um programa que leia um valor em metros e o exiba convertido em centrimetro e milímetro"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Digite um valor em metros: 4\n",
      "O valor convertido em centímetros é: 400.0 centimetros e 4000.0 milímetros\n"
     ]
    }
   ],
   "source": [
    "valor = float(input('Digite um valor em metros: '))\n",
    "print('O valor convertido em centímetros é: {} centimetros e {} milímetros' .format(valor*100, valor*1000))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 009 - Faça um programa que leia um número inteiro qualquer e mostre na tela a sua tabuada."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Digite um número inteiro: 6\n",
      "------------\n",
      "Tabuada do número: \n",
      " 6\n",
      " 12\n",
      " 18\n",
      " 24\n",
      " 30\n",
      " 36\n",
      " 42\n",
      " 48\n",
      " 54\n",
      " 60\n",
      "\n"
     ]
    }
   ],
   "source": [
    "n = int(input('Digite um número inteiro: '))\n",
    "print('-' * 12)\n",
    "print('Tabuada do número: \\n {}\\n {}\\n {}\\n {}\\n {}\\n {}\\n {}\\n {}\\n {}\\n {}\\n' .format(n*1, n*2, n*3, n*4, n*5, n*6, n*7, n*8, n*9, n*10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 010 - Crie um programa que leia quanto dinheiro uma pessoa tem na carteira e mostre quantos dólares ela pode comprar."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Digite o valor de sua carteira: 250\n",
      "Digite o valor atual do dólar: 5.4\n",
      "Sua carteira em dólares vale: 46.30\n"
     ]
    }
   ],
   "source": [
    "valor = float(input('Digite o valor de sua carteira: '))\n",
    "dolar = float(input('Digite o valor atual do dólar: '))\n",
    "s = valor / dolar\n",
    "print('Sua carteira em dólares vale: {:.2f}' .format(s))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 011 - Faça um programa que leia a largura e a altura de uma parede em metros, calcule a sua area e a quantidade de tinta necessaria para pinta-la, sabendo que cada litro de tinta pinta uma aéra de 2m²."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Digite a largura de uma parede em metros: 3\n",
      "Digite a altura de uma parede em metros: 2\n",
      "Sua parede possui 6.0 metros quadrados e voce irá precisar de 3.0 litros de tinta. \n"
     ]
    }
   ],
   "source": [
    "largura = float(input('Digite a largura de uma parede em metros: '))\n",
    "altura  = float(input('Digite a altura de uma parede em metros: '))\n",
    "area = largura * altura\n",
    "tinta = area / 2\n",
    "print('Sua parede possui {} metros quadrados e voce irá precisar de {} litros de tinta. ' .format(area, tinta))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  012 - Falça um algoritmo que leio o preço de um produto e mostre seu preço com 5% de desconto."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Digite o preço: 200\n",
      "O Preço com 5% de desconto é de 190.00.\n"
     ]
    }
   ],
   "source": [
    "preco = float(input(\"Digite o preço: \"))\n",
    "desconto = (preco*95)/100\n",
    "print('O Preço com 5% de desconto é de {:.2f}.' .format(desconto))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  013 - Falça um algoritmo que leio o salario de um funcionario e mostre seu novo salario com 15% de aumento"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Digite seu salário: 2000\n",
      "Seu salario com aumento é de 2300.0\n"
     ]
    }
   ],
   "source": [
    "salario = float(input('Digite seu salário: '))\n",
    "aumento = (salario*115)/100\n",
    "print('Seu salario com aumento é de {}' .format(aumento))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 014 - Escreva um programa que converta uma temperatura digitada em ºC e converta para ºF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Informe a temperatura em ºC: 0\n",
      "A temperatura em 0.0 ºC corresponde a 32.0 ºF!\n"
     ]
    }
   ],
   "source": [
    "c = float(input('Informe a temperatura em ºC: '))\n",
    "f = 9 * c / 5 + 32\n",
    "print('A temperatura em {} ºC corresponde a {} ºF!' .format(c, f))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 015 - Escreva um programa que pergunte a quantidade de KM percorridos por um carro alugado e a quantidade de dias pelos quais ele foi alugado. Calcule o preço a pagar, sabendo que o carro custa 60,00 por dia mais 0,15 por km rodado."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Quantos dias alugados? 10\n",
      "Quantos KM rodados? 100\n",
      "O total pelo serviço é de 615.00\n"
     ]
    }
   ],
   "source": [
    "dias = int(input('Quantos dias alugados? '))\n",
    "km = float(input('Quantos KM rodados? '))\n",
    "total = (dias * 60) + (km * 0.15)\n",
    "print('O total pelo serviço é de {:.2f}' .format(total))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
